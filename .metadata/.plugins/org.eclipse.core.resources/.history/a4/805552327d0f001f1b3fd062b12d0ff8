/**********************************************************************************************************************
 * \file observer.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/


/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define NUM_CHN     2

#define IDX_CHA     0
#define IDX_CHB     1
/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
const float32 J = 2.09e-5;
const float32 B = 0.00002;
const float32 Kt = 0.042;
const float32 Kb = 0.042;
const float32 R = 8.4;
const float32 L = 1.16;

float32 g_theta_h_chA;
float32 g_w_h_chA;
float32 g_i_h_chA;

float32 g_theta_h[2];
float32 g_w_h[2];
float32 g_i_h[2];

float32 g_int_theta_h[2];
float32 g_int_w_h[2];
float32 g_int_i_h[2];

/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
void obrserveMotor(float32 v_in)
{
    for (size_t i = 0; i < NUM_CHN; i++) {
        g_int_i_h[i] += (-Kb / L * g_w_h[i] - R / L * g_i_h[i] + v_in / L);
        g_i_h[i] = g_int_i_h[i];
        g_int_w_h[i] += -B / J * g_w_h[i] + Kt / J * g_i_h[i];
        g_w_h[i] = g_int_w_h[i];
        g_int_theta_h[i] += g_w_h[i];
        g_theta_h[i] = g_int_theta_h[i];
    }
}

float32 getThetaHat(size_t chn)
{
    return g_theta_h[chn];
}

float32 getWHat(size_t chn)
{
    return g_w_h[chn];
}

float32 getIHat(size_t chn)
{
    return g_i_h[chn];
}
