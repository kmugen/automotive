/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "pid.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
const float32 K_p_chA = 0.01;
const float32 K_i_chA = 0.01;
const float32 K_d_chA = 0;

const float32 K_p_chB = 0.01;
const float32 K_i_chB = 0.01;
const float32 K_d_chB = 0;

float32 g_prev_err_chA;
float32 g_prev_int_err_chA;

float32 g_prev_err_chB;
float32 g_prev_int_err_chB;

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
float32 pidController(uint8 channel)
{
    float32 err = pid_inputs[IDX_ERR];
    float32 integral_err = pid_inputs[IDX_INT_ERR_PREV] + err * pid_inputs[IDX_T_S];
    float32 derivative_err = (err - pid_inputs[IDX_ERR_PREV]) / pid_inputs[IDX_T_S];

    pid_inputs[IDX_INT_ERR_PREV] = integral_err;
    pid_inputs[IDX_ERR_PREV] = err;

    return ((err * pid_inputs[IDX_K_P]) + (integral_err * pid_inputs[IDX_K_I]) + (derivative_err * pid_inputs[IDX_K_D]));
}
